

$powA     := λ.λ.(v1 ?  (v* (f1 (v1-1) v)) :  1)
$powCodeA := λ.λ.(v1 ? `(v*,(f1 (v1-1) v)) : '1)
/* $powCodeA := λ.λ.(,v1 ? `(v*,(f1 (,v1-1) v)) : '1) // the ,v1 isn't quite right, we want to evaluate, then unwrap */ 

$powB     := λ.λ.(v ?  ( v1* (f1 v1 (v-1))) :  1)
$powCodeB := λ.λ.(v ? `(,v1*,(f1 v1 (v-1))) : '1)

$powC     := λ.λ.(v ?  ( v1* (f (v-1))) :  1)
$powCodeC := [ω²]λ.λ.(v ? `(,v1*,(f (v-1))) : '1)
/* $powCodeC := λ.λ.(%v ? `(,v1*,(f ^(%v-1))) : '1) */

/* TODO: implement $unstage */

/* ($powA 3 2) */
/* $pow3 := `λ.,($powCodeA 3 0) */
/* (,$pow3 2) */

/* ($powB 2 3) */
/* ($powCodeB 'v 3)  */ 

/* ($powC 2 3) */
/* ($powCodeC 'v 3) */



/* $rem_qq  := λ[`ω²]`[,ω²]v~[`ω²][,ω²]v */
/* $rem_quo := λ[`ω²]'[,ω²]v~[`ω²][,ω²]v */
/* $rem_spl := λ[`ω²],[,ω²]v~[`ω²][,ω²]v */

$unstage := ( λ[`ω²]`[,ω²]v~[`ω²][,ω²](f1 v)
            | λ[`ω²]'[,ω²]v~[`ω²][,ω²](f1 v)
            | λ[`ω²],[,ω²]v~[`ω²][,ω²](f1 v)
            | λ[`ω²]λ.[,ω²]v~[`ω²]λ.[,ω²](f1 v)
            | λ[`ω²]([,ω²]v ? [,ω²]v1 : [,ω²]v2)~[`ω²]([,ω²](f3 v) ? [,ω²](f3 v1) : [,ω²](f3 v2))
            | λ[`ω²]([,ω²]v * [,ω²]v1)~[`ω²]([,ω²](f2 v) * [,ω²](f2 v1))
            | λ.v
            )

/* ($unstage ['ω²]`'123) */
/* ($unstage ['ω²]'123) */
/* ($unstage ['ω²],123) */
/* ($unstage ['ω²]123) */
$unstagedPowC := [%ω²]($unstage $powCodeC)

($unstagedPowC 2 3)


/* $f := λ`(,v + ,v1)~`(,v1 + ,v) */
/* ($f '(10+20)) */

